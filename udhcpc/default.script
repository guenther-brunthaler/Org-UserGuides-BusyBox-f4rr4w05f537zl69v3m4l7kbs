#! /bin/sh
# BusyBox udhcpc interface setup callback script
#
# Version 2016.160
# Copyright (c) 2016 Guenther Brunthaler. All rights reserved.
#
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

set -e

# The directory where this script stores its runtime configuration. The user
# of this script must also put an option-$interface file there which will be
# sourced and may override default settings (see function get_user_options).
runtime_dir=/var/run/udhcpc

# The directory where interface-specific contents for /etc/resolv.conf are
# stored as separate files for the existing network interfaces. File "default"
# contains the fallback DNS configuration. A symlink "active" selects which of
# the files is currently in use as the active nameserver configuration.
resolv_conf_dir=/var/run/resolv.conf

get_user_options() {
	# Preset option default values for all interfaces.
	use_dns=true
	use_gateway=true
	# Source the user shell snippet for overriding the above options for a
	# particular interface. The snippet must exist but it may be empty.
	. "$runtime_dir"/options-$interface
	# Verify values.
	chkbool "$use_dns"
	chkbool "$use_gateway"
}

chkbool() {
	silent expr x"$1" : x'\(true\|false\)$'
}

log() {
	local pri=$1; shift
	logger -t "$0" -p "daemon.$pri" "$*"
}

trap 'test $? = 0 || log err "BusyBox DHCP callback script failed!"' 0

silent() {
	"$@" > /dev/null 2>& 1 && return
	log err "Assertion failure: $*"
	false || exit
}

chkip() {
	silent expr x"$1" : x'[0-9]\{1,3\}\([.][0-9]\{1,3\}\)\{3\}$'
}

chkifn() {
	silent expr x"$1" : x'[a-z][-_a-z:0-9]\+$'
}

dns_fallback() {
	if
		test x"`readlink "$resolv_conf_dir"/active`" \
			= x"dns-$interface"
	then
		# ""$resolv_conf_dir"/default" is typically a symlink to
		# "/etc/resolv.conf.fallback" or similar.
		silent test -f "$resolv_conf_dir"/default
		ln -sf default "$resolv_conf_dir"/active
	fi
}

no_route() {
	while route del default gw 0.0.0.0 dev $interface
	do
		:
	done
}

deconfig() {
	chkifn "$interface"
	get_user_options
	$use_dns && dns_fallback
        rm -f "$resolv_conf_dir"/dns-$interface
	$use_gateway && no_route
	rm -f "$runtime_dir"/gateway-$interface
	silent ifconfig $interface 0.0.0.0
}

config() {
	chkifn "$interface"
	get_user_options
	chkip "$ip"
	set ifconfig $interface $ip
	if test -n "$subnet"
	then
		chkip "$subnet"
		set "$@" netmask $subnet
	fi
	if test -n "$broadcast"
	then
		chkip "$broadcast"
		set "$@" broadcast $broadcast
	else
		set "$@" broadcast +
	fi
	silent "$@"
	$use_dns && dns_fallback
	if $use_gateway
	then
		no_route
		if test -n "$router"
		then
			local rt mt=0
			for rt in $router
			do
				chkip "$rt"
				route add default gw $rt dev $interface \
					metric $mt
				mt=`expr $mt + 1`
			done
		else
			log warning "DHCP did not provide a default route"	
		fi
	fi
	{
		test -n "$router" && printf "%s\n" "$router"
	} > "$runtime_dir"/gateway-$interface
	if test -n "$dns"
	then
		for ns in $dns
		do
			chkip "$ns"
	        	echo "nameserver $ns"
	        	log info "name server $ns"
	        done > "$resolv_conf_dir"/dns-$interface
        	$use_dns && ln -sf dns-$interface "$resolv_conf_dir"/active
        else
        	if $use_dns
        	then
			logc info "DHCP did not provide any name servers," \
				"using fallback servers"
        	fi
	        rm -f "$resolv_conf_dir"/dns-$interface
        fi
}

export LC_CTYPE=POSIX # Ensure ASCII character ranges are used in regexes.
case $1 in
	renew) deconfig; config;;
	bound) config;;
	deconfig | leasefail | nak) deconfig;;
	*) log warning "Unsupported directive '$1'"
esac

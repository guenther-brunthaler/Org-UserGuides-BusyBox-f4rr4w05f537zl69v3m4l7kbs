The expr command prints the value of EXPRESSION to stdout.

EXPRESSION may be:

ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
ARG1 <= ARG2
ARG1 = ARG2
ARG1 != ARG2
ARG1 >= ARG2
ARG1 > ARG2
ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
ARG1 - ARG2
ARG1 * ARG2
ARG1 / ARG2
ARG1 % ARG2
STRING : REGEXP          Anchored BRE pattern match of REGEXP in STRING
match STRING REGEXP      [NPX] Same as STRING : REGEXP
substr STRING POS LENGTH [NPX] Substring of STRING, POS counted from 1
index STRING CHARS       [NPX] Index in STRING where any CHARS is found, or 0
length STRING            [NPX] Length of STRING
quote TOKEN              [NPX] Interpret TOKEN as a string, even if it is a keyword like 'match' or an operator like '/'
(EXPRESSION)             Value of EXPRESSION
integer                  An argument consisting only of an (optional) unary minus followed by digits.
string                   A string argument

where "[NPX]" means "non-portable non-POSIX extension" and "BRE" means "basic regular expression".

POSIX BREs do not support \+, \? or \|, but BusyBox BREs in fact do as a [NPX].

Beware that many operators need to be escaped or quoted for shells.

Comparisons are arithmetic if both ARGs are integers, else lexicographical.

Pattern matches return the string matched between \( and \) or null; if \( and \) are not used, they return the number of characters matched or 0.

The RETURN CODE of expr is 1 (EXIT_FAILURE) if it evaluates to the intever value zero or to the string "0" or to a null (empty) string.

The RETURN CODE of expr is 0 (EXIT_SUCCESS) otherwise.
